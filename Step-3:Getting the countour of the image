SubStep 1:

##writing the countour function in a dummy/utilities file

###############################################
# we create a new python file called utilities
# we input the coloured image to this function and whatever process it is required to find the contours it willl apply the process
# and give us output in a nicely formated way

import cv2
import numpy as np



def getContours(img,cThr=[100,100],showCanny=False):        #the default threshold is 100,100
    imgGray =cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    imgBlur =cv2.GaussianBlur(imgGray,(5,5),1)
#here 5,5 is the kernelnext we r going to apply cannyedgedetector to find all the edges
    imgCanny =cv2.Canny(imgBlur,cThr[0],cThr[1])  #the user can change this
    cv2.imshow('canny',imgCanny)
    if showCanny:cv2.imshow('canny',imgCanny)

###########################################

Substep 2:
##Importing dummy/utilities and calling the function in the main program

import cv2
import utilities
import numpy as np
import dummy

webcam=False
path='2.jpg'
cap=cv2.VideoCapture(0)
cap.set(10,160)      #Accessing the brightness with ID number 10
cap.set(3,19200)     #3 is the ID number for width
cap.set(4,10800)     #4 is the ID number for height


while True:
   if webcam:success,img =cap.read()
   else:img=cv2.imread(path)   ###after running this we r getting a very big image so going for resizing


   dummy.getContours(img,showCanny=True)
   img =cv2.resize(img,(0,0),None,0.5,0.5)      #here scaling it down to 0.5,0.5

   cv2.imshow('Orignal',img)   #Displaying the image
   cv2.waitKey(1)    #Delayed by 1ms
   
##################################################


#note to stop the camera just press the stop button
#Note 2:we r going to applu dilation and errosion in Step 3 so that we get good edges

###########################################
